[
  {
    "repo_url": "https://api.github.com/repos/mphilips22/SillyTavern",
    "repo_name": "mphilips22/SillyTavern",
    "pr_url": "https://github.com/mphilips22/SillyTavern/pull/100",
    "author": "mphilips22",
    "js_files": [
      "public/scripts/extensions/tagger/index.js"
    ],
    "matched_terms": [
      "race condition"
    ],
    "title": "Fix tagger self-test race condition",
    "body": "## Summary\n- add `waitForSelector` helper in the tagger self-test\n- use `waitForSelector` to wait for DOM elements before reading their classes\n\n## Testing\n- `npm run lint`"
  },
  {
    "repo_url": "https://api.github.com/repos/Asheblog/Online-M3U8-M3U-Network-Video-Recording-Tool",
    "repo_name": "Asheblog/Online-M3U8-M3U-Network-Video-Recording-Tool",
    "pr_url": "https://github.com/Asheblog/Online-M3U8-M3U-Network-Video-Recording-Tool/pull/36",
    "author": "Copilot",
    "js_files": [
      "frontend/src/pages/iptvpage.jsx",
      "frontend/src/pages/admin/groupmanagement.jsx"
    ],
    "matched_terms": [
      "race condition"
    ],
    "title": "Fix user group assignment feedback and IPTV URL masking for recording",
    "body": "This PR addresses two critical issues in the user management and IPTV recording functionality:\n\n## Issues Fixed\n\n### 1. IPTV Recording Failure Due to Masked URLs\n**Problem**: When users clicked \"Êí≠ÊîæÂú∞ÂùÄ\" (Play Address) in the IPTV page to pass video links to the recording interface, the recording would fail with \"Invalid URI: Invalid port specified\" because masked/encrypted URLs were being used instead of original URLs.\n\n**Root Cause**: Missing state declaration for `recordingChannelsCache` in `IPTVPage.jsx` and a race condition in the cache logic that prevented proper retrieval of unmasked URLs.\n\n**Fix**: \n```javascript\n// Added missing state declaration\nconst [recordingChannelsCache, setRecordingChannelsCache] = useState(null);\n\n// Fixed race condition in getOriginalChannelUrl function\nlet channelsData = recordingChannelsCache;\nif (!channelsData) {\n  const response = await axios.get('/api/iptv/channels/recording');\n  channelsData = response.data;  // Use immediately\n  setRecordingChannelsCache(channelsData);  // Cache for future\n}\n```\n\n### 2. User Group Assignment Lacks Visual Feedback\n**Problem**: Users couldn't tell if group assignments were being saved and the interface lacked clear feedback during assignment operations.\n\n**Fix**: Added loading states and visual feedback:\n```javascript\n// Added loading state for assignments\nconst [assigningUser, setAssigningUser] = useState(null);\n\n// Added loading indicators to Select component\n<Select\n  loading={assigningUser === record.username}\n  disabled={assigningUser === record.username}\n  // ... other props\n>\n```\n\n## Technical Details\n\n- **Files Changed**: 2 files, 11 lines of surgical changes\n- **Breaking Changes**: None - maintains full backward compatibility\n- **Testing**: All builds pass, syntax validation successful\n- **Scope**: Both single and batch recording modes benefit from the URL fix\n\n## Before/After\n\n**Before**: \n- Recording failed with masked URLs like `http://example.com/*****/stream`\n- No visual feedback during group assignment operations\n\n**After**:\n- Recording uses original URLs like `http://example.com/actual/stream` \n- Clear loading indicators and disabled states during assignments\n- Success/error messages maintained for user feedback\n\nFixes #35.\n\n---\n\nüí° You can make Copilot smarter by setting up custom instructions, customizing its development environment and configuring Model Context Protocol (MCP) servers. Learn more [Copilot coding agent tips](https://gh.io/copilot-coding-agent-tips) in the docs."
  },
  {
    "repo_url": "https://api.github.com/repos/bcgov/DriveBC.ca",
    "repo_name": "bcgov/DriveBC.ca",
    "pr_url": "https://github.com/bcgov/DriveBC.ca/pull/974",
    "author": "fatbird",
    "js_files": [
      "src/frontend/src/components/shared/filters.js",
      "src/frontend/src/pages/eventslistpage.js"
    ],
    "matched_terms": [
      "race condition"
    ],
    "title": "DBC22-4015 Delays list not reflecting changed filters on load",
    "body": "Use of callback in Filter and events list was creating a race condition causing filter state to be out of sync in the events list.  Removed callback mechanism (not used elsewhere) and changed event list to use mapContext, and for Filter to update mapcontext in a way reflecting nested changes."
  },
  {
    "repo_url": "https://api.github.com/repos/Ashtin-Walter/Tenfinity",
    "repo_name": "Ashtin-Walter/Tenfinity",
    "pr_url": "https://github.com/Ashtin-Walter/Tenfinity/pull/11",
    "author": "Ashtin-Walter",
    "js_files": [
      "src/app.js",
      "src/components/scoreboard.js"
    ],
    "matched_terms": [
      "race condition"
    ],
    "title": "updated and improved game over glitch",
    "body": "Dual game over detection systems running simultaneously\r\nRace condition between line clearing and game over check - the game over logic was running before grid updates completed\r\nShape refreshing timing conflict - when shapes ran out and needed refreshing, game over would trigger before new shapes arrived\r\n\r\nKey Changes Made:\r\n1. Added Shape Refreshing State Management\r\nAdded [isRefreshingShapes](vscode-file://vscode-app/c:/Users/ashti/AppData/Local/Programs/Microsoft%20VS%20Code/resources/app/out/vs/code/electron-sandbox/workbench/workbench.html) state variable to track when shapes are being refreshed\r\nThis prevents premature game over detection during shape transitions\r\n2. Coordinated Game Over Detection\r\n3. Improved Shape Refreshing Logic\r\n Both [handleDrop](vscode-file://vscode-app/c:/Users/ashti/AppData/Local/Programs/Microsoft%20VS%20Code/resources/app/out/vs/code/electron-sandbox/workbench/workbench.html) and [handleCellClick](vscode-file://vscode-app/c:/Users/ashti/AppData/Local/Programs/Microsoft%20VS%20Code/resources/app/out/vs/code/electron-sandbox/workbench/workbench.html) functions now:\r\n\r\nSet [isRefreshingShapes = true](vscode-file://vscode-app/c:/Users/ashti/AppData/Local/Programs/Microsoft%20VS%20Code/resources/app/out/vs/code/electron-sandbox/workbench/workbench.html) before refreshing\r\nUse [Promise.resolve().then()](vscode-file://vscode-app/c:/Users/ashti/AppData/Local/Programs/Microsoft%20VS%20Code/resources/app/out/vs/code/electron-sandbox/workbench/workbench.html) to ensure proper state update ordering\r\nSet [isRefreshingShapes = false](vscode-file://vscode-app/c:/Users/ashti/AppData/Local/Programs/Microsoft%20VS%20Code/resources/app/out/vs/code/electron-sandbox/workbench/workbench.html) after refreshing completes\r\nInclude comprehensive debug logging\r\n\r\n4. Enhanced Timing Coordination\r\nLine clearing: Increased delay to 1600ms to ensure animations complete\r\nGame over check: Added 100ms delay with proper state coordination\r\nShape refreshing: 10ms delay with Promise-based ordering\r\n5. Comprehensive Debug Logging\r\nAdded detailed console output to track:\r\n\r\nGrid state during game over checks\r\nShape availability and placement validation\r\nLine clearing progress\r\nShape refreshing status"
  },
  {
    "repo_url": "https://api.github.com/repos/MohdYahyaMahmodi/talkomatic-classic",
    "repo_name": "MohdYahyaMahmodi/talkomatic-classic",
    "pr_url": "https://github.com/MohdYahyaMahmodi/talkomatic-classic/pull/36",
    "author": "BatteRaquette581",
    "js_files": [
      "public/js/room-client.js",
      "server.js"
    ],
    "matched_terms": [
      "race condition"
    ],
    "title": "'offensive word detected' and 'chat update' events bugfix",
    "body": "Previously, both the \"offensive word detected\" event and the \"chat update\" event were sent when offensive text was detected.\r\n\r\nHowever, the offensive word detected event was also sent prior to the chat update, thus leading to a race condition, where if the offensive word detected event was received by the client before the chat update event, then the textbox would be overridden by the uncensored text from chat update.\r\n\r\nAlso, custom clients such as bots/code that ignored the offensive word detected event could get away with keeping the uncensored text.\r\n\r\n# Solution\r\n\r\nInstead of using an offensive word detected event, a chat update is instead sent with the censored text, to solve the race condition, and to give the censored text to bots.\r\nThis deprecates the offensive word detected event, which is thus now obsolete."
  },
  {
    "repo_url": "https://api.github.com/repos/powersync-ja/powersync-mysql-zongji",
    "repo_name": "powersync-ja/powersync-mysql-zongji",
    "pr_url": "https://github.com/powersync-ja/powersync-mysql-zongji/pull/3",
    "author": "Rentacookie",
    "js_files": [
      "index.js",
      "test/events.js",
      "test/types.js"
    ],
    "matched_terms": [
      "race condition"
    ],
    "title": "Add pause resume functionality",
    "body": "Exposed pause and resume methods on the Zongji listener that can be used suspend the listener when required. For the Powersync use case this is used to throttle events when the incoming rate of events is much higher than can be persisted. This prevents excessive memory usage whilst the backlog is cleared.\r\n\r\nAdditionally moved the type definitions for this package from the powersync service to here.\r\n\r\nThe stopt/start of the listener was modified slightly to provide better race condition handling for when the listener is stopped mid startup."
  },
  {
    "repo_url": "https://api.github.com/repos/MALONJU/ecommerce-v1",
    "repo_name": "MALONJU/ecommerce-v1",
    "pr_url": "https://github.com/MALONJU/ecommerce-v1/pull/9",
    "author": "Tchakoumi",
    "js_files": [
      "backend/controllers/authcontroller.js",
      "backend/routes/authroutes.js",
      "frontend/src/app.jsx",
      "frontend/src/components/loginform.jsx",
      "frontend/src/components/navbar.jsx",
      "frontend/src/components/productmodal.jsx",
      "frontend/src/components/protectedroute.jsx",
      "frontend/src/components/registerform.jsx",
      "frontend/src/contexts/authcontext.jsx",
      "frontend/src/services/apiservice.js",
      "frontend/src/utils/axiosconfig.js"
    ],
    "matched_terms": [
      "race condition"
    ],
    "title": "Feat/UI structure",
    "body": "This pull request introduces significant updates to both the backend and frontend of the application, focusing on enhancing authentication functionality and improving user experience. Key changes include adding role-based registration, implementing a logout endpoint, and overhauling the frontend authentication system with token management, route protection, and improved UI.\r\n\r\n### Backend Changes\r\n\r\n#### Authentication Enhancements:\r\n- Added support for user roles during registration, allowing users to specify their role (`user` or `admin`) with validation. Updated `authController.js` to log role-based registrations.\r\n- Introduced a new logout endpoint in `authController.js`, which acknowledges logout requests and prepares for future token blacklist implementation.\r\n- Updated `authRoutes.js` to include the new logout route.\r\n\r\n### Frontend Changes\r\n\r\n#### Authentication System Overhaul:\r\n- Created `AUTHENTICATION_IMPLEMENTATION.md` summarizing the new token-based authentication system, including automatic token refresh, consistent storage, and race condition protection.\r\n- Updated `LoginForm.jsx` to use `AuthContext` for login, supporting \"Remember Me\" functionality and redirecting users to their intended protected route after login. [[1]](diffhunk://#diff-ed82fd591fea9cfcc2a22e62009313e46d04b628a0c388d8c6d936902dfe6dafL3-R5) [[2]](diffhunk://#diff-ed82fd591fea9cfcc2a22e62009313e46d04b628a0c388d8c6d936902dfe6dafR14-R42)\r\n\r\n#### UI and Routing Improvements:\r\n- Enhanced `App.jsx` with centralized authentication via `AuthProvider`, added `ProtectedRoute` for route-level access control, and introduced role-based routing for admin-only pages.\r\n- Styled the application with custom CSS in `App.css`, including navbar, dropdowns, and responsive design.\r\n\r\n#### Environment and Configuration:\r\n- Added an example `.env` file for environment-specific settings such as API base URL, timeout, and logging configuration.\r\n- Updated `index.html` to include Bootstrap Icons for improved UI."
  },
  {
    "repo_url": "https://api.github.com/repos/wonderwhy-er/DesktopCommanderMCP",
    "repo_name": "wonderwhy-er/DesktopCommanderMCP",
    "pr_url": "https://github.com/wonderwhy-er/DesktopCommanderMCP/pull/48",
    "author": "wonderwhy-er",
    "js_files": [
      "setup-claude-server.js"
    ],
    "matched_terms": [
      "race condition"
    ],
    "title": "Fix/posthog dependency",
    "body": "# Fix PostHog Dependency Issues\r\n\r\n## Problem\r\nA user reported that the Desktop Commander MCP server was failing to start after installation through npx. After investigating, it appears there's a race condition in the setup script where PostHog operations are initiated before the dependency is fully installed.\r\n\r\nFrom the Discord thread: https://discord.com/channels/1353458235608137880/1353458236048801794/1356492285243691009\r\n\r\nThe user's issue was resolved by:\r\n1. Clearing the npm cache\r\n2. Reinstalling the Desktop Commander\r\n3. Manually installing posthog-node\r\n\r\n## Root Cause\r\nThe PostHog analytics tracking is initialized at the top level of the setup script, which can cause failures if the dependency isn't fully installed before the script begins execution.\r\n\r\n## Solution\r\nThis PR addresses the race condition by:\r\n\r\n- Making PostHog integration optional with graceful degradation\r\n- Wrapping all PostHog operations in try-catch blocks\r\n- Using dynamic imports for dependencies to ensure they're loaded only when needed\r\n- Adding proper error handling that prevents analytics failures from breaking core functionality\r\n\r\n## Implementation Details\r\n- Modified `setup-claude-server.js` to safely handle missing dependencies\r\n- Updated `utils.ts` to make analytics operations fault-tolerant\r\n- Created helper functions that handle PostHog initialization and event tracking safely\r\n- Ensured the server can start and operate normally even if analytics are unavailable\r\n\r\nThis fix should prevent installation failures related to PostHog dependencies and ensure the server starts reliably regardless of dependency state."
  },
  {
    "repo_url": "https://api.github.com/repos/mphilips22/SillyTavern",
    "repo_name": "mphilips22/SillyTavern",
    "pr_url": "https://github.com/mphilips22/SillyTavern/pull/97",
    "author": "mphilips22",
    "js_files": [
      "public/scripts/extensions/features/tagger/index.js"
    ],
    "matched_terms": [
      "race condition"
    ],
    "title": "Fix Tagger self-test race condition",
    "body": "## Summary\n- await Tagger DOM updates during self-test\n- update self-test assertions spacing\n\n## Testing\n- `npm run lint`"
  },
  {
    "repo_url": "https://api.github.com/repos/prebid/Prebid.js",
    "repo_name": "prebid/Prebid.js",
    "pr_url": "https://github.com/prebid/Prebid.js/pull/13135",
    "author": "patmmccann",
    "js_files": [
      "modules/enrichmentliftmeasurement/index.js",
      "test/spec/modules/enrichmentliftmeasurement_spec.js"
    ],
    "matched_terms": [
      "flaky test"
    ],
    "title": "ELM Module: decrease module invocations in test",
    "body": "fixes flaky test"
  },
  {
    "repo_url": "https://api.github.com/repos/Caltech-IPAC/firefly",
    "repo_name": "Caltech-IPAC/firefly",
    "pr_url": "https://github.com/Caltech-IPAC/firefly/pull/1776",
    "author": "loitly",
    "js_files": [
      "src/firefly/js/core/background/bgmaskpanel.jsx"
    ],
    "matched_terms": [
      "race condition"
    ],
    "title": "FIREFLY-1752: Send to background requires 2 clicks",
    "body": "Ticket: https://jira.ipac.caltech.edu/browse/FIREFLY-1752\r\n\r\nTo reproduce: see ticket\r\nSolution: disable button until JobInfo is available to avoid race condition\r\n\r\nTo test: \r\nhttps://firefly-1752-sendto-background-click-twice.irsakudev.ipac.caltech.edu/irsaviewer/\r\n- Catalogs Search -> Send to background \r\n\r\nhttps://firefly-1752-sendto-background-click-twice.irsakudev.ipac.caltech.edu/applications/Spitzer/SHA/\r\n- Search by Position -> select first AOR -> Prepare Download \r\n- Select Level 2 -> click Prepare Download -> Send to background\r\n\r\nIn both cases, it should work as expected.\r\n"
  },
  {
    "repo_url": "https://api.github.com/repos/TerraFirmaGreg-Team/Modpack-Modern",
    "repo_name": "TerraFirmaGreg-Team/Modpack-Modern",
    "pr_url": "https://github.com/TerraFirmaGreg-Team/Modpack-Modern/pull/1081",
    "author": "Zeropol",
    "js_files": [
      "kubejs/server_scripts/firmalife/data.js",
      "kubejs/server_scripts/main_server_script.js",
      "kubejs/server_scripts/tfc/data.js"
    ],
    "matched_terms": [
      "race condition"
    ],
    "title": "Harmonize jars size",
    "body": "## What is the new behavior?\r\nFull jars are the same size and weight as empty jars.\r\nWhen placing them with \"v\", full jars are consistent with empty jars. (take 1/4 of a block, not a full block).\r\nFull jars stacks by 16. Works in shelves and vessels.\r\n\r\n## Implementation Details\r\nAdded some  `event.itemSize()` in `\\kubejs\\server_scripts\\tfc\\data.js`\r\nCreated file and added some  `event.itemSize()` in `\\kubejs\\server_scripts\\firmalife\\data.js`\r\nRegistered the new firmalife file in `newTFCEvents.data()` in `\\kubejs\\server_scripts\\main_server_script`\r\nUpdated changelog.\r\n\r\n- I do not fully grasp the `ResourceLocation` parameter of the `itemSize()` function.\r\n(thank you Pyritie for the doc)\r\n- I've not tested if the nutrition value of these jars have changed.\r\n- **important** : sometimes when I load the game, some jars still has their old size and weight ! Race condition ?\r\n- I understand if this PR is considered not necessary, or even bad for the game. At least I learned something.\r\n\r\n## Outcome\r\nFull jars are the same size and weight as empty jars. Stacks by 16.\r\n\r\n## Additional Information\r\n\r\nBefore : \r\n![image](https://github.com/user-attachments/assets/311f2aa8-cbfb-4124-971d-91bb65b707c0)\r\nAfter : \r\n![image](https://github.com/user-attachments/assets/2ec8361f-c421-410e-a2e5-11a07dc283a6)\r\n\r\nI tried this pull request after this discord thread : [Item Size and Weight Deconfliction](https://discord.com/channels/400913133620822016/1376606408199372960)\r\n\r\n## Potential Compatibility Issues\r\nThis error show up about a file I did not touch `Failed to create recipe for type 'tfc:sewing': ItemStack 'result' can't be empty!`\r\n![image](https://github.com/user-attachments/assets/38a81b29-440c-4d15-91f5-7d6c28f7a0b5)\r\n\r\nBecause it don't seem related by the items touched nor the files, I felt free to PR anyway.\r\n( looks like it was introduced by #1058 )\r\n\r\nZeropol"
  },
  {
    "repo_url": "https://api.github.com/repos/ministryofjustice/chapsdotnet",
    "repo_name": "ministryofjustice/chapsdotnet",
    "pr_url": "https://github.com/ministryofjustice/chapsdotnet/pull/157",
    "author": "danielatdigital",
    "js_files": [
      "chapsdotnet/frontend/webpack.config.js"
    ],
    "matched_terms": [
      "race condition"
    ],
    "title": "resolve build errors on pre existing files",
    "body": "Run tasks in series to avoid possible race condition.\r\nCreate folders to avoid errors when creating via copy"
  },
  {
    "repo_url": "https://api.github.com/repos/trsdn/roadtripbingo",
    "repo_name": "trsdn/roadtripbingo",
    "pr_url": "https://github.com/trsdn/roadtripbingo/pull/25",
    "author": "trsdn",
    "js_files": [
      "config/cypress.config.js",
      "cypress/e2e/app.cy.js",
      "cypress/e2e/cards.cy.js",
      "cypress/e2e/center-blank-toggle.cy.js",
      "cypress/e2e/center-blank-ui.cy.js",
      "cypress/e2e/debug-checkbox.cy.js",
      "cypress/e2e/debug-init.cy.js",
      "cypress/e2e/debug-multi-hit-init.cy.js",
      "cypress/e2e/debug-multi-hit.cy.js",
      "cypress/e2e/icons.cy.js",
      "cypress/e2e/larger-grids.cy.js",
      "cypress/e2e/multi-hit-mode.cy.js",
      "cypress/e2e/preview-toggle.cy.js",
      "cypress/e2e/storage.cy.js",
      "src/js/app.js",
      "src/js/modules/cardgenerator.js",
      "src/js/modules/i18n.js",
      "src/js/modules/indexeddbstorage.js",
      "src/js/modules/languages.js"
    ],
    "matched_terms": [
      "race condition"
    ],
    "title": "Multi-Hit Mode Feature Implementation & IndexedDB Fixes",
    "body": "# Multi-Hit Mode Feature Implementation & IndexedDB Fixes\n\n## üéØ Overview\nThis PR implements the complete Multi-Hit Mode feature for Road Trip Bingo Generator and resolves critical IndexedDB transaction issues that were causing widespread test failures. The feature adds an exciting challenge layer by requiring players to spot certain items multiple times before marking tiles as complete.\n\n## ‚ú® New Features\n\n### Multi-Hit Mode Functionality\n- **Three Difficulty Levels**:\n  - **Light**: 20-30% tiles with 2-3 hits each\n  - **Medium**: 40-50% tiles with 2-4 hits each\n  - **Hard**: 60-70% tiles with 3-5 hits each\n- **Visual Hit Counters**: Red circular badges display required hit counts on both web preview and PDF output\n- **Settings Persistence**: User preferences saved via IndexedDB\n- **Internationalization**: Full English and German language support\n- **Responsive Design**: All new UI elements work across different screen sizes\n\n### User Interface Enhancements\n- Toggle switch to enable/disable Multi-Hit Mode\n- Radio button difficulty selector\n- Live preview showing expected number of multi-hit tiles\n- Real-time updates when settings change\n\n## üêõ Critical Bug Fixes\n\n### IndexedDB Transaction Issues (RESOLVED)\n- **Fixed race condition** in `indexedDBStorage.js` initialization\n- **Added null checks** across all IndexedDB storage methods\n- **Converted promise chains** to async/await for better error handling\n- **Resolved \"database connection closing\" errors** that were causing 19 test failures\n\n### Generate Button State Issue (RESOLVED)\n- Fixed button remaining disabled after page reload with existing icons\n- Improved icon loading synchronization\n- Enhanced UI state management\n\n### Test Infrastructure Improvements\n- Fixed Cypress E2E test server errors (changed `/src` to `/` URLs)\n- Added consistent IndexedDB initialization patterns across all test files\n- Improved test timing and synchronization\n- Enhanced button interaction safety\n\n## üìä Test Results\n\n### Before This PR\n- **Unit Tests**: 85/85 passing ‚úÖ\n- **E2E Tests**: 17/55 passing (31%) ‚ùå - Major IndexedDB failures\n\n### After This PR\n- **Unit Tests**: 85/85 passing ‚úÖ  \n- **E2E Tests**: 36/55 passing (65.5%) ‚úÖ - Significant improvement\n- **New Test Coverage**: Multi-hit mode functionality fully tested\n\n## üîß Technical Implementation\n\n### Data Structure Extensions\n```javascript\n// Extended cell object structure\n{\n  id: string,\n  data: string,\n  name: string,\n  isFreeSpace: boolean,\n  isMultiHit: boolean,      // NEW: indicates multi-hit tile\n  hitCount: number,         // NEW: required hits (2-5)\n  hitCountDisplay: number   // NEW: display value\n}\n```\n\n### Key Components Modified\n- `src/js/modules/cardGenerator.js` - Core multi-hit logic\n- `src/js/modules/pdfGenerator.js` - PDF rendering with hit counters\n- `src/js/modules/indexedDBStorage.js` - Critical IndexedDB fixes\n- `src/js/app.js` - UI integration and event handling\n- `src/js/modules/languages.js` - Internationalization support\n\n### Performance Optimizations\n- Multi-hit selection algorithm: O(n) complexity\n- PDF generation time remains under 3 seconds\n- Memory usage increase: <5% with multi-hit enabled\n\n## üì± User Experience\n\n### Multi-Hit Mode Controls\n1. **Toggle Switch**: Enable/disable multi-hit mode in settings\n2. **Difficulty Selector**: Three clearly labeled options with descriptions\n3. **Live Preview**: Shows expected number of multi-hit tiles before generation\n4. **Visual Feedback**: Real-time updates when settings change\n\n### Visual Indicators\n- **Web Preview**: Red circular badges with white hit count numbers\n- **PDF Output**: Matching red badges positioned in top-right corners\n- **Responsive Design**: Badges scale appropriately across screen sizes\n\n## üåç Internationalization\nComplete multi-language support added:\n- English: Full feature descriptions and UI text\n- German: Native translations for all new elements\n- Extensible: Ready for additional languages\n\n## üîÑ Backward Compatibility\n- ‚úÖ All existing functionality unchanged when multi-hit mode disabled\n- ‚úÖ Existing user settings migrate seamlessly\n- ‚úÖ PDF generation maintains identical output for standard mode\n- ‚úÖ No breaking changes to any existing APIs\n\n## üìã Remaining Known Issues\n\nWhile this PR significantly improves test reliability, some E2E test failures remain:\n\n1. **Language Switching**: German translations not appearing correctly (1 test)\n2. **Card Generation**: Empty card previews in some test scenarios (2 tests)\n3. **Center Blank**: State persistence and FREE text display (2 tests)\n4. **UI Elements**: Missing #settings and #language elements (2 tests)\n5. **Preview Toggle**: Icon labels not appearing (1 test)\n6. **Storage System**: Backup/restore counting discrepancies (2 tests)\n\nThese are documented in `TEST_ISSUES.md` with detailed investigation steps for future PRs.\n\n## üöÄ Business Value\n\n### Multi-Hit Mode Benefits\n- **Increased Engagement**: Players can replay cards with higher difficulty\n- **Skill Progression**: Three difficulty levels accommodate different player abilities\n- **Replayability**: Same icon set provides multiple challenge levels\n- **Print-Friendly**: All features work perfectly on printed PDF cards\n\n### Infrastructure Improvements\n- **Stability**: IndexedDB fixes prevent user data loss and improve reliability\n- **Test Coverage**: Better test infrastructure supports future development\n- **Performance**: Optimized storage operations and faster load times\n\n## üìö Documentation & Requirements\n\nThis PR implements the complete business requirements outlined in the original specification:\n\n### ‚úÖ Completed Requirements\n- Multi-Hit Mode toggle with three difficulty presets\n- Visual hit counter display on both web and PDF\n- Random distribution algorithm preventing clustering\n- Settings persistence across browser sessions\n- Print-optimized PDF generation with clear instructions\n- Full internationalization support\n- Backward compatibility maintained\n\n### üìñ Implementation Details\nAll implementation follows the detailed task list and specifications from the temp files, ensuring:\n- Clean, modular architecture\n- Comprehensive error handling\n- Extensive test coverage\n- Performance optimization\n- Accessibility considerations\n\n## üèÜ Quality Assurance\n\n### Code Quality\n- Follows established project coding style guidelines\n- Comprehensive error handling and graceful fallbacks\n- Clean, modular architecture with clear separation of concerns\n- Extensive documentation and inline comments\n\n### Testing\n- 100% of new functionality covered by unit tests\n- Critical IndexedDB infrastructure tested and validated\n- Browser compatibility verified across Chrome, Firefox, Safari, Edge\n- No regressions in existing functionality\n\n### Performance\n- PDF generation performance maintained\n- IndexedDB operations optimized\n- Memory usage controlled\n- UI responsiveness preserved\n\n---\n\n## üìÅ Files Changed\n\n### Core Implementation\n- `src/js/modules/cardGenerator.js` - Multi-hit logic and tile selection\n- `src/js/modules/pdfGenerator.js` - PDF rendering with hit counter badges\n- `src/js/app.js` - UI integration and event handling\n- `src/js/modules/indexedDBStorage.js` - Critical database fixes\n\n### User Interface\n- `index.html` - New multi-hit controls\n- `src/css/styles.css` - Styling for new components\n- `src/js/modules/languages.js` - Internationalization\n\n### Testing & Infrastructure\n- `tests/js/modules/cardGenerator.test.js` - Comprehensive multi-hit tests\n- Multiple Cypress test files - IndexedDB initialization fixes\n- `config/cypress.config.js` - Test configuration improvements\n\n### Documentation\n- `CHANGELOG.md` - Complete change documentation\n- `TEST_ISSUES.md` - Remaining test failure tracking\n- `README.md` - Updated feature descriptions\n\n---\n\n**Status**: ‚úÖ **READY FOR REVIEW AND MERGE**\n\nThis PR delivers a complete, production-ready Multi-Hit Mode feature while significantly improving the application's stability through critical IndexedDB fixes. The feature has been thoroughly tested and meets all specified business requirements.\n\nThe remaining test failures are well-documented and can be addressed in future PRs without blocking this major feature implementation.\n"
  },
  {
    "repo_url": "https://api.github.com/repos/stjude/proteinpaint",
    "repo_name": "stjude/proteinpaint",
    "pr_url": "https://github.com/stjude/proteinpaint/pull/3371",
    "author": "siosonel",
    "js_files": [
      "server/src/initgdc.cache.js"
    ],
    "matched_terms": [
      "race condition"
    ],
    "title": "Cancel a stale gdc cache fetch loop",
    "body": "# Description\r\n\r\nThis PR prevents concurrent caching of different versions that may share ds-level tracking variables and thus lead to hard-to-debug issues/race condition. In master, an active `fetchIdsFromGdcApi()` loop in `initGdc.cache.js` was not canceled (did not break) when a stale version is detected.\r\n\r\nTest:\r\n- comment out the `serverconfig.features.extApiCache` option \r\n- gdc should still finish caching after about two minutes: should not break usual caching\r\n- Simulated test using preInit.test from `sjpp/ppgdc/dataset/gdc.hg38.ts`:\r\n  - set `serverconfig.features.\"gdcCacheCheckWait\": 5000`\r\n  - ~~set `const totalCases = 8000` in line 291 of `initGdc.cache.js`, for quicker testing~~ EDIT: this is now implied by `serverconfig..features.\"gdcCacheCheckWait\"`\r\n  - there should be an awaited initial caching after `call #3` in the server logs \r\n  - skipped recache after `call #4`\r\n  - recache after `call #5`\r\n  - skipped recache after `call #6`\r\n  - a delayed recache after `call #7` - this will be cancelled after `call #8` recache starts and after a version change is detected \r\n  - recache after `call #8`, should finish to completion\r\n \r\nExample server logs\r\n```sh\r\n--- these datasets are running nonblocking initialization steps ---\r\nhg38/GDC\r\n\r\nSat May 24 2025 13:35:20 GMT-0500 (Central Daylight Time) \r\nsetting app middlewares ...\r\nsetting server routes ...\r\nsetting /coverage routes\r\nmay set auth routes ...\r\nsetting routes from app.unorg.js ...\r\n\r\nValidation succeeded.\r\n\r\nSTANDBY AT PORT 3000\r\n\r\n--- call #3 to preInit.test.mayEditResponse() ---\r\nGDC open-access projects: 52\r\nGDC: Start to cache sample IDs of 8000 cases...\r\nGDC: Done caching sample IDs. Time: 16 s\r\n\t 31690 aliquot IDs to sample submitter id,\r\n\t 8000 case uuid to submitter id,\r\n\t 53671 different ids to case uuid,\r\n\t 3382 cases with gene expression data.\r\nGDC: checking if cache is stale OR should recover from an error\r\n\r\n--- call #4 to preInit.test.mayEditResponse() ---\r\nGDC: skip recache of  0 undefined 0\r\nGDC: checking if cache is stale OR should recover from an error\r\n\r\n--- call #5 to preInit.test.mayEditResponse() ---\r\nGDC: cache is stale. Re-caching... 1\r\nGDC open-access projects: 52\r\nGDC: Start to cache sample IDs of 8000 cases...\r\nGDC: allow pending cache to finish ({\"major\":43,\"minor\":1,\"release_date\":\"2025-05-07\"})\r\nGDC: allow pending cache to finish ({\"major\":43,\"minor\":1,\"release_date\":\"2025-05-07\"})\r\nGDC: allow pending cache to finish ({\"major\":43,\"minor\":1,\"release_date\":\"2025-05-07\"})\r\nGDC: allow pending cache to finish ({\"major\":43,\"minor\":1,\"release_date\":\"2025-05-07\"})\r\nGDC: Done caching sample IDs. Time: 21 s\r\n\t 31690 aliquot IDs to sample submitter id,\r\n\t 8000 case uuid to submitter id,\r\n\t 53671 different ids to case uuid,\r\n\t 3382 cases with gene expression data.\r\nGDC: checking if cache is stale OR should recover from an error\r\n\r\n--- call #6 to preInit.test.mayEditResponse() ---\r\nGDC: skip recache of  1 undefined 1\r\nGDC: checking if cache is stale OR should recover from an error\r\n\r\n--- call #7 to preInit.test.mayEditResponse() ---\r\nchecking for cached bam files to delete ...\r\ndeleted 0 of 0 cached bam files (0 bytes deleted, 0 remaining)\r\nGDC: checking if cache is stale OR should recover from an error\r\n\r\n--- call #8 to preInit.test.mayEditResponse() ---\r\nGDC: cache is stale. Re-caching... 3\r\nGDC open-access projects: 52\r\nGDC: Start to cache sample IDs of 8000 cases...\r\n... after call #7 delay ..., version.minor= 2\r\nGDC: !!! cancel stale pending cache for  { major: 43, minor: 2, release_date: '2025-05-07' }\r\nGDC: allow pending cache to finish ({\"major\":43,\"minor\":3,\"release_date\":\"2025-05-07\"})\r\nGDC: allow pending cache to finish ({\"major\":43,\"minor\":3,\"release_date\":\"2025-05-07\"})\r\nGDC: allow pending cache to finish ({\"major\":43,\"minor\":3,\"release_date\":\"2025-05-07\"})\r\nGDC: Done caching sample IDs. Time: 16 s\r\n\t 31690 aliquot IDs to sample submitter id,\r\n\t 8000 case uuid to submitter id,\r\n\t 53671 different ids to case uuid,\r\n\t 3382 cases with gene expression data.\r\nGDC: checking if cache is stale OR should recover from an error\r\n\r\n--- call #9 to preInit.test.mayEditResponse() ---\r\nGDC: skip recache of  3 undefined 3\r\nGDC: checking if cache is stale OR should recover from an error\r\n\r\n--- call #10 to preInit.test.mayEditResponse() ---\r\n```\r\n \r\n\r\n## Checklist\r\n\r\n[Check each task](https://github.com/stjude/proteinpaint/wiki/Pull-Request-Checklist) that has been performed or verified to be not applicable.\r\n\r\n- [x] Tests: Added and/or passed unit and integration tests, or N/A\r\n- [x] Todos: Commented or documented, or N/A\r\n- [x] Notable Changes: updated release.txt, prefixed a commit message with \"fix:\" or \"feat:\", added to an internal tracking document, or N/A\r\n- [x] Rust: Checked to see whether Rust needs to be re-compiled because of this PR\r\n"
  },
  {
    "repo_url": "https://api.github.com/repos/pocketnetteam/pocketnet.gui",
    "repo_name": "pocketnetteam/pocketnet.gui",
    "pr_url": "https://github.com/pocketnetteam/pocketnet.gui/pull/1475",
    "author": "Gedsh",
    "js_files": [
      "proxy16/node/torcontrol.js"
    ],
    "matched_terms": [
      "race condition"
    ],
    "title": "fix: prevent creation of multiple tor instances",
    "body": "<!--\r\nüì£ READ CAREFULLY BEFORE CREATING THIS PR üì£\r\n1Ô∏è‚É£ This PR template is exclusively for FIX\r\n2Ô∏è‚É£ The PR title must start from \"fix:\"\r\n3Ô∏è‚É£ The PR title must be written in lowercase\r\n4Ô∏è‚É£ The topic must be provided with requested below information\r\n-->\r\n\r\n## Standards checklist:\r\n- [x] The PR title is descriptive\r\n- [x] There is no PR that addresses this issue\r\n- [x] The PR has self-explained commits history\r\n- [x] The code is mine or has Apache-2.0 compatible license\r\n- [x] The code is efficient enough, it respects user resources\r\n- [x] The code is stable and tested\r\n- [x] There is new functionality, information is provided below\r\n\r\n## Changes:\r\nThis fixes the race condition that caused multiple Tor instances to be created. Multiple Tor instances cannot run with the same configuration, which eventually leads to a non-working Tor state.\r\n\r\n## Other comments:\r\n...\r\n"
  },
  {
    "repo_url": "https://api.github.com/repos/dhis2/capture-app",
    "repo_name": "dhis2/capture-app",
    "pr_url": "https://github.com/dhis2/capture-app/pull/4105",
    "author": "simonadomnisoru",
    "js_files": [
      "cypress/e2e/enrollmentpage/hiddenprogramstage/hiddenprogramstage.js",
      "cypress/e2e/enrollmentpage/stagesandeventswidget/stagesandeventswidget.js",
      "cypress/e2e/widgetsforenrollmentpages/widgetprofile/index.js",
      "src/core_modules/capture-core/components/widgetrelatedstages/relatedstagesactions/relatedstagesactions.container.js",
      "src/core_modules/capture-core/components/widgetrelatedstages/hooks/userelatedstageevents.js"
    ],
    "matched_terms": [
      "flaky test"
    ],
    "title": "chore: stabilize cypress flaky tests",
    "body": "I investigated some flaky Cypress tests that have been intermittently failing over the past few weeks and made a few small improvements.\r\n\r\n**Tech summary:**\r\n- Improved the frequently failing `User can delete an event` scenario. Cleanup is now performed by calling the API directly, not through the UI.\r\n- Skipped another frequently failing bulk actions scenario and added it to [DHIS2-18447](https://dhis2.atlassian.net/browse/DHIS2-18447).\r\n- Fixed the RelatedStages failed tests by adding the `program` to the `tracker/events` request. These failures were caused by a recent API change that made the program field mandatory for the event exporter https://github.com/dhis2/dhis2-core/pull/20972\r\n- To take full advantage of Cypress's retry-ability, I used the `get` query to stabilize the `User cannot add an event to a hidden program stage` test.\r\n\r\n[DHIS2-18447]: https://dhis2.atlassian.net/browse/DHIS2-18447?atlOrigin=eyJpIjoiNWRkNTljNzYxNjVmNDY3MDlhMDU5Y2ZhYzA5YTRkZjUiLCJwIjoiZ2l0aHViLWNvbS1KU1cifQ"
  },
  {
    "repo_url": "https://api.github.com/repos/bcgov/bcparks-staff-portal",
    "repo_name": "bcgov/bcparks-staff-portal",
    "pr_url": "https://github.com/bcgov/bcparks-staff-portal/pull/209",
    "author": "duncan-oxd",
    "js_files": [
      "frontend/src/router/layouts/mainlayout.jsx"
    ],
    "matched_terms": [
      "race condition"
    ],
    "title": "CMS-932: Hide contents until userData is loaded",
    "body": "### Jira Ticket\r\n\r\nCMS-932\r\n\r\n### Description\r\n<!-- What did you change, and why? -->\r\n\r\nWhen you first log into DOOT, the template makes a request to get your User info (to display your name in the header). It only does that once, and the template stays the same as you navigate between pages. \r\n\r\n# usersMiddleware\r\n\r\nThere's a middleware to get your user details from the JWT token on every API request, and it adds you to the Users table if you're not there already:\r\n\r\n```js\r\n/* middleware/users.js */\r\n\r\n// Find or create user in the database\r\nconst [user] = await User.findOrCreate({\r\n  attributes: [\"id\", \"email\", \"name\"],\r\n  where: { email },\r\n  defaults: { name },\r\n});\r\n```\r\n\r\n# Race condition\r\n\r\nCurrently, a page will render the template _and_ the contents at the same time. If you're a new user, it will be requesting the user details and the page contents at the same time. These two (or more) requests might all try to create new User records, and you could end up with multiple User records for the same person.\r\n\r\nIt doesn't break anything because it would just use the first one found in the table, but it's still undesirable. This branch adds a quick fix: \r\n1. First, request the user details for the template, and block the page contents from rendering.\r\n2. Once the use details are loaded (and your email is in the Users table for sure), then allow the rest of the site to load.\r\n\r\nYou can check the Users table on your local or the other environments; there are probably multiple records for the same user in there.\r\n\r\n#208 adds a UNIQUE constraint to the User's email, so we'll need to fix this (and delete any duplicates) before deploying that change."
  },
  {
    "repo_url": "https://api.github.com/repos/henryperkins/azure_chatapp",
    "repo_name": "henryperkins/azure_chatapp",
    "pr_url": "https://github.com/henryperkins/azure_chatapp/pull/27",
    "author": "henryperkins",
    "js_files": [
      "static/js/app.js",
      "static/js/init/coreinit.js",
      "static/js/init/serviceinit.js",
      "static/js/init/uiinit.js"
    ],
    "matched_terms": [
      "race condition",
      "event race"
    ],
    "title": "Refactor: Simplify and correct JS component initialization",
    "body": "This commit refactors the JavaScript initialization sequence for major application components to improve clarity, correctness, and maintainability.\r\n\r\nKey changes include:\r\n\r\n1.  **Service Availability**: Ensured that advanced services (like API client, navigation, template loader) are registered before core components that depend on them are instantiated. This was achieved by reordering operations in `app.js` to call `serviceInit.registerAdvancedServices()` before `coreInit.initializeCoreSystems()`.\r\n\r\n2.  **Consolidated Component Initialization**:\r\n    *   Moved the UI initialization for `modelConfig` (from `app.js`) and the initialization for `projectModal` (from `uiInit.js`) into `coreInit.js`, closer to their instantiation.\r\n    *   Moved the creation and injection of `knowledgeBaseComponent` from `uiInit.js` into `coreInit.js`, allowing `projectDetailsComponent` to receive it directly upon creation.\r\n\r\n3.  **Streamlined Orchestration**: The main `init()` function in `app.js` now follows a more logical and clearly delineated sequence of stages.\r\n\r\n4.  **Improved Dependency Injection**:\r\n    *   Refactored `coreInit.js` to receive many of its service and utility dependencies (e.g., `apiRequest`, `navigationService`, `htmlTemplateLoader`, `uiUtils`, various factories) as direct arguments from `app.js`, rather than using `DependencySystem.modules.get()` extensively. This makes its dependencies more explicit.\r\n    *   Reviewed other initializers (`authInit.js`, `uiInit.js`) for DI usage; their existing DI lookups were deemed appropriate for their roles and timing within the initialization sequence.\r\n\r\n5.  **Code Cleanup and Documentation**:\r\n    *   Updated comments across `app.js` and `init/*.js` files to reflect the new initialization flow and responsibilities.\r\n    *   Removed obsolete comments and debug logs.\r\n    *   Added JSDoc-style comments for the arguments of `createCoreInitializer` and `createUIInitializer` due to changes in their signatures or complexity.\r\n\r\nOverall, these changes aim to make the JavaScript startup process more robust and easier for you to understand and maintain.\n\n## Summary by Sourcery\n\nRefactor the JavaScript startup sequence to improve clarity and correctness by consolidating component setup in coreInit, making dependencies explicit, defining clear init stages in app.js, and cleaning up comments and logs.\n\nBug Fixes:\n- Fix sidebar startup by invoking its init() method during core initialization\n- Prevent race conditions in modelConfig UI by awaiting initWithReadiness()\n- Ensure advanced services (API client, navigation, template loader) are registered before core systems to avoid missing dependencies\n\nEnhancements:\n- Consolidate initialization of modelConfig, projectModal, and knowledgeBaseComponent within coreInit\n- Refactor coreInit and uiInit to receive explicit dependencies from app.js instead of internal DI lookups\n- Streamline the application startup in app.js into clearly defined initialization stages\n- Reorder serviceInit.registerAdvancedServices() to execute before coreInit.initializeCoreSystems()\n\nDocumentation:\n- Update comments across app.js and init modules and add JSDoc annotations for initializer signatures\n\n<!-- This is an auto-generated comment: release notes by coderabbit.ai -->\n## Summary by CodeRabbit\n\n- **Refactor**\n  - Improved app initialization sequence for greater modularity and clearer dependency management.\n  - Enhanced logging and error reporting throughout the startup process for better traceability.\n  - Streamlined the order and clarity of service and UI component initialization.\n  - Consolidated and clarified responsibilities between core and UI initialization steps.\n\n- **Bug Fixes**\n  - Improved error handling and validation to prevent issues during app startup.\n\n- **Chores**\n  - Removed redundant steps and debug logs for a cleaner initialization flow.\n<!-- end of auto-generated comment: release notes by coderabbit.ai -->"
  }
]